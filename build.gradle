buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '1.0'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-freemarker')
    compile('org.springframework.boot:spring-boot-starter-web')


    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('mysql:mysql-connector-java')

    /* hibernate library 추가 */
    compile('org.springframework.boot:spring-boot-starter-data-jpa:1.5.9.RELEASE')

    /* facebook */
    compile("org.springframework.social:spring-social-facebook")

    /* lombok */
    compile('org.projectlombok:lombok')

    /* querydsl */
    compile('com.querydsl:querydsl-jpa')
    compile('com.querydsl:querydsl-apt')
    compile('com.querydsl:querydsl-core')

//	/* spring session */
//	compile('org.springframework.session:spring-session-data-redis:1.3.0.RELEASE')
//	/* spring redis */
//	compile('org.springframework.boot:spring-boot-starter-data-redis:1.5.3.RELEASE')


    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('ch.qos.logback:logback-classic:1.2.3')
}

/**** QueryDSL Class Generate Script ****/
def queryDslOutput = file("target/generated-sources/java")


sourceSets {
    main {
        java {
            srcDir "target/generated-sources/java"
        }
    }
}


task generateQueryDSL(type: JavaCompile, group: 'build') {
    doFirst {
        if (!queryDslOutput.exists()) {
            logger.info("Creating `$queryDslOutput` directory")

            if (!queryDslOutput.mkdirs()) {
                throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
            }
        }
    }
    source = sourceSets.main.java /* 자동으로 Entity를 찾아줌 */
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            /* Java compile 이전에 JPAAnnotationProcessor 가 실행 Q도메인클래스 생성 */
            "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = queryDslOutput
}

/**
 * gradle clean task 실행 시 querydsl 경로 제거
 */
clean {
    delete queryDslOutput
}

